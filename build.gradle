plugins {
    id 'java-library'
    id 'maven-publish'
}

/*
 * Gets the version name from the latest Git tag, omit leading "v" - yeah!
 * Note: a plugin way to do this would be via https://plugins.gradle.org/plugin/net.nemerosa.versioning
 */
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--always'
        standardOutput = stdout
    }
    def tag = stdout.toString().trim()
    return tag.startsWith("v") ? tag.substring(1) : tag
}

/*
 * Gets the commit hash from the latest Git
 * Note: a plugin way to do this would be via https://plugins.gradle.org/plugin/net.nemerosa.versioning
 */
def getGitCommitHash = {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-1', '--format="%H"'
        standardOutput = stdout
    }
    return stdout.toString().trim().replace("\"", "")
}

version = version != null && version != "unspecified" ? version : getVersionName()

ext {
    specVendor           = 'International Air Transport Association (IATA)'
    product              = 'ONE Record Ontology-Model'
    specTitle            = product + ' Specification'
    implVendor           = 'Riege Software'
    implTitle            = product + ' Java Library'
    implDescription      = implVendor + ' ' + product + ' Java Library'
    specVersion          = '1.1'
    implVersion          = version
    javaTarget           = JavaVersion.VERSION_1_8
}



configurations.all {
    // Disabling transitive resolution of dependencies
    // https://docs.gradle.org/current/userguide/resolution_rules.html#sec:disabling_resolution_transitive_dependencies
    transitive = false
}

dependencies {
    api "com.fasterxml.jackson.core:jackson-annotations:2.13.3"
    api "cz.cvut.kbss.jopa:jopa-api:0.16.5"
    api "net.sourceforge.owlapi:owlapi-api:5.1.17"
    api "org.apache.commons:commons-rdf-api:0.5.0"
    api "io.swagger:swagger-annotations:1.5.24"
    api "org.springframework.data:spring-data-mongodb:3.0.9.RELEASE"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
}

group 'com.riege'
sourceCompatibility = javaTarget
targetCompatibility = javaTarget

java {
    withSourcesJar()    // to get a "sourcesJar" task
}

tasks.withType(Jar) {
    manifest {
        attributes(
                "Built-By"               : System.properties['user.name'],
                "Build-Revision"         : getGitCommitHash(),
                "Build-Timestamp"		 : new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                "Build-Jdk"      		 : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                "Build-OS"      		 : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
                "Created-By"     		 : "Gradle ${gradle.gradleVersion}",
                "Specification-Title"    : specTitle,
                "Specification-Vendor"   : specVendor,
                "Specification-Version"  : specVersion,
                "Implementation-Title"   : implTitle,
                "Implementation-Vendor"  : implVendor,
                "Implementation-Version" : implVersion
        )
    }
}

test {
    useJUnitPlatform()
}

repositories {
    mavenCentral()
}

publishing {
    publications {
        thisLibrary(MavenPublication) {
            groupId group
            from components.java
            pom {
                name = implTitle
                description = implDescription
                url = System.getenv("PROJECT_URL")
            }
        }
    }
    repositories {
        maven {
            name = "thisLibrary"
            url = System.getenv("MAVEN_PUBLISH_URL")
            credentials {
                username = System.getenv("MAVEN_PUBLISH_USERNAME")
                password = System.getenv("MAVEN_PUBLISH_PASSWORD")
            }
        }
    }
}
